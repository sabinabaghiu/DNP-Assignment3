@page "/AdultList"
@using Models
@using Assignment1.Data
@inject IAdultsService AdultsService
@inject NavigationManager NavigationManager

<h3>Adults</h3>

@if (adults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adults.Any())
{
    <p>
        <em>No Adult items exist. Please add some </em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Hair color</th>
            <th>Eye color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job</th>
            <AuthorizeView Policy="MustBeAdmin">
                <th>Remove</th>
            </AuthorizeView>
            
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adults)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>@item.JobTitle</td>
                <AuthorizeView Policy="MustBeAdmin">
                    <td>
                        <button @onclick="@(() => RemoveAdult(item.Id))">
                            <i class="oi oi-trash"/>
                        </button>
                    </td>
                </AuthorizeView>
                
            </tr>
        }
        </tbody>
    </table>
    }

@code {
    private IList<Adult> adults;
    
    protected override async Task OnInitializedAsync()
    {
        adults = await AdultsService.GetAdultsAsync();
    }
    
    private void RemoveAdult(int Id)
    {
        Adult adultToRemove = adults.First(a => a.Id == Id);
        AdultsService.RemoveAdultAsync(Id);
        adults.Remove(adultToRemove);
    }
}