@page "/Login"
@using Assignment1.Authentication
@namespace LoginComponent

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div class="LoginDiv">
            <h2>Login</h2>
            <div class="form-group">
                <input class="form-control" type="text" placeholder="Username" @bind-value="username"/>
            </div>
            <div class="form-group">
                <input class="form-control" type="password" placeholder="Password" @bind-value="password"/>
            </div>
            <div style="color:red">@errorMessage</div>
            <div class="form-group">
                <a class="d-flex justify-content-center" href="" @onclick="PerformLogin">
                    <div class="button">
                        <span>Login</span>
                    </div>
                </a>
            </div>
        </div>
    </NotAuthorized>
    <Authorized>
        <div class="LogoutDiv">
        <div class="form-group">
            <a class="d-flex justify-content-center" href="" @onclick="PerformLogout">
                <div class="button">
                    <span>Logout</span>
                </div>
            </a>
        </div>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout()
    {
        errorMessage = "";
        username = "";
        password = "";
        try
        {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
        }
    }

}