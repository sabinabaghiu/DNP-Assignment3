@page "/Filters"
@using Assignment1.Data
@using Models
@inject IAdultsService AdultsService

<h3>Filter adults</h3>
<div class="row">
    <div class="col-md">
        <p>
            Filter by first name: <input type="text" @oninput="@((arg) => FilterByFirstName(arg))" style="width: 130px"/>
        </p>
    </div>
    <div class="col-md">
        <p>
            Filter by age: <input type="number" @oninput="@((arg) => FilterByAge(arg))" style="width: 50px"/>
        </p>
    </div>
    <div class="col-md">
        <p>
            Filter by eye color: <input type="text" @oninput="@((arg) => FilterByEyeColor(arg))" style="width: 100px"/>
        </p>
    </div>
</div>

@if (adultsToShow == null)
{
    <p>
        <em>Select filter</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Hair color</th>
            <th>Eye color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>@item.JobTitle</td>
            </tr>
        }
        </tbody>
    </table>
    }

@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private string? filterByFirstName;
    private int? filterByAge;
    private string? filterByEyeColor;
    
    protected override async Task OnInitializedAsync()
    {
        allAdults = await AdultsService.GetAdultsAsync();
        adultsToShow = null; 
    }
    
    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filterByFirstName = null;
        try
        {
            filterByFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e){}
        ExecuteFilter();
    }

    private void FilterByAge(ChangeEventArgs changeEventArgs)
    {
        filterByAge = null;
        try
        {
            filterByAge = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e){}
        ExecuteFilter();
    }
    
    private void FilterByEyeColor(ChangeEventArgs changeEventArgs)
    {
        filterByEyeColor = null;
        try
        {
            filterByEyeColor = changeEventArgs.Value.ToString();
        }
        catch (Exception e){}
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = allAdults.Where(a =>
            (filterByFirstName != null && String.Equals(a.FirstName, filterByFirstName, StringComparison.OrdinalIgnoreCase) || filterByFirstName == null) &&
            (filterByAge != null && a.Age == filterByAge || filterByAge == null) &&
            (filterByEyeColor != null && String.Equals(a.EyeColor, filterByEyeColor, StringComparison.OrdinalIgnoreCase) || filterByEyeColor == null)
            ).ToList();
    }
}